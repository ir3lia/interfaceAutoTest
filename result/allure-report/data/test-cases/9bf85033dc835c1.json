{
  "uid" : "9bf85033dc835c1",
  "name" : "添加策略规则-规则名称为空",
  "fullName" : "testCase.SMP.authentication.AuthenticationPolicyController.addauthenticationRule.test_addauthenticationRule.Test_class#test_all",
  "historyId" : "72c5f3c85b72187c92a137bfcecea83f",
  "time" : {
    "start" : 1601373332397,
    "stop" : 1601373332488,
    "duration" : 91
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: ['code'] 值错误！\nassert [412] == [200]\n  At index 0 diff: 412 != 200\n  Use -v to get the full diff",
  "statusTrace" : "self = <test_addauthenticationRule.Test_class object at 0x0000008686168A08>\ncase = '添加策略规则-规则名称为空', description = '添加策略规则-规则名称为空'\nhttpParameters = {'caseNum': 'case_04', 'checkDBType': 'exist', 'httpType': 'POST', 'isCheckDB': False, ...}\n\n    @allure.story(interfaceChName + \"-测试用例\")\n    @allure.title(\"{case}\")\n    @pytest.mark.dependency(name=interfaceEnName + \"_all\", depends=[interfaceEnName + \"_main\"])\n    @pytest.mark.parametrize(\"case,description,httpParameters\", list(parameters_all))\n    def test_all(self, case, description, httpParameters):\n        allure.attach('{0}'.format(testerName), \"测试人员\")\n        allure.attach(json.dumps(httpParameters[\"query\"], ensure_ascii=False), \"接口入参\")  # 测试用例的入参\n        if 'caseNum' in httpParameters:\n            print(\"\\n ==清理数据库 & 插入数据==\")\n            mongoDataOpr.oprDatasToDB(dbJsonPath, dbName, \"all\", httpParameters[\"caseNum\"])\n        if httpParameters[\"paramType\"] == \"string\":\n            stringParams = jsonAnalysis.getStringParams(httpParameters[\"query\"])\n            urlPath2 = urlPath + stringParams\n            postJ = httpApi.httpRequests(urlIP, urlPath2, httpParameters[\"httpType\"])\n        elif httpParameters[\"paramType\"] == \"json\":\n            urlPath3 = urlPath + \"/5f475da0893a250006859b74/addRule\"\n            postJ = httpApi.httpRequests(urlIP, urlPath3, httpParameters[\"httpType\"], parame=httpParameters[\"query\"])\n        else:\n            assert 0, '参数类型「' + httpParameters[\"paramType\"] + '」无法处理！'\n        allure.attach(\"{0}\".format(postJ), \"接口出参\")  # 测试用例的出参\n        keyPaths = jsonAnalysis.getKeyPaths(httpParameters['response'])\n        for path in keyPaths:\n            res1 = jsonAnalysis.getKeyValues(httpParameters[\"response\"], path)\n            res2 = jsonAnalysis.getKeyValues(postJ, path)\n            assert len(res2) > 0, path + \"不存在\"\n>           assert res1 == res2, path + \" 值错误！\"\nE           AssertionError: ['code'] 值错误！\nE           assert [412] == [200]\nE             At index 0 diff: 412 != 200\nE             Use -v to get the full diff\n\ntestCase\\SMP\\authentication\\AuthenticationPolicyController\\addauthenticationRule\\test_addauthenticationRule.py:248: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: ['code'] 值错误！\nassert [412] == [200]\n  At index 0 diff: 412 != 200\n  Use -v to get the full diff",
    "statusTrace" : "self = <test_addauthenticationRule.Test_class object at 0x0000008686168A08>\ncase = '添加策略规则-规则名称为空', description = '添加策略规则-规则名称为空'\nhttpParameters = {'caseNum': 'case_04', 'checkDBType': 'exist', 'httpType': 'POST', 'isCheckDB': False, ...}\n\n    @allure.story(interfaceChName + \"-测试用例\")\n    @allure.title(\"{case}\")\n    @pytest.mark.dependency(name=interfaceEnName + \"_all\", depends=[interfaceEnName + \"_main\"])\n    @pytest.mark.parametrize(\"case,description,httpParameters\", list(parameters_all))\n    def test_all(self, case, description, httpParameters):\n        allure.attach('{0}'.format(testerName), \"测试人员\")\n        allure.attach(json.dumps(httpParameters[\"query\"], ensure_ascii=False), \"接口入参\")  # 测试用例的入参\n        if 'caseNum' in httpParameters:\n            print(\"\\n ==清理数据库 & 插入数据==\")\n            mongoDataOpr.oprDatasToDB(dbJsonPath, dbName, \"all\", httpParameters[\"caseNum\"])\n        if httpParameters[\"paramType\"] == \"string\":\n            stringParams = jsonAnalysis.getStringParams(httpParameters[\"query\"])\n            urlPath2 = urlPath + stringParams\n            postJ = httpApi.httpRequests(urlIP, urlPath2, httpParameters[\"httpType\"])\n        elif httpParameters[\"paramType\"] == \"json\":\n            urlPath3 = urlPath + \"/5f475da0893a250006859b74/addRule\"\n            postJ = httpApi.httpRequests(urlIP, urlPath3, httpParameters[\"httpType\"], parame=httpParameters[\"query\"])\n        else:\n            assert 0, '参数类型「' + httpParameters[\"paramType\"] + '」无法处理！'\n        allure.attach(\"{0}\".format(postJ), \"接口出参\")  # 测试用例的出参\n        keyPaths = jsonAnalysis.getKeyPaths(httpParameters['response'])\n        for path in keyPaths:\n            res1 = jsonAnalysis.getKeyValues(httpParameters[\"response\"], path)\n            res2 = jsonAnalysis.getKeyValues(postJ, path)\n            assert len(res2) > 0, path + \"不存在\"\n>           assert res1 == res2, path + \" 值错误！\"\nE           AssertionError: ['code'] 值错误！\nE           assert [412] == [200]\nE             At index 0 diff: 412 != 200\nE             Use -v to get the full diff\n\ntestCase\\SMP\\authentication\\AuthenticationPolicyController\\addauthenticationRule\\test_addauthenticationRule.py:248: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "3f6a851495d52cbd",
      "name" : "测试人员",
      "source" : "3f6a851495d52cbd.attach",
      "type" : "text/plain",
      "size" : 11
    }, {
      "uid" : "ee26de6f3c26d5b4",
      "name" : "接口入参",
      "source" : "ee26de6f3c26d5b4.attach",
      "type" : "text/plain",
      "size" : 144
    }, {
      "uid" : "82075824d82d7da",
      "name" : "接口出参",
      "source" : "82075824d82d7da.attach",
      "type" : "text/plain",
      "size" : 44
    }, {
      "uid" : "49042b5237a21457",
      "name" : "stdout",
      "source" : "49042b5237a21457.txt",
      "type" : "text/plain",
      "size" : 280
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 0,
    "attachmentsCount" : 4,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "认证策略管理-测试用例"
  }, {
    "name" : "epic",
    "value" : "AuthenticationPolicyController"
  }, {
    "name" : "feature",
    "value" : "认证策略管理"
  }, {
    "name" : "parentSuite",
    "value" : "testCase.SMP.authentication.AuthenticationPolicyController.addauthenticationRule"
  }, {
    "name" : "suite",
    "value" : "test_addauthenticationRule"
  }, {
    "name" : "subSuite",
    "value" : "Test_class"
  }, {
    "name" : "host",
    "value" : "R11493"
  }, {
    "name" : "thread",
    "value" : "12264-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testCase.SMP.authentication.AuthenticationPolicyController.addauthenticationRule.test_addauthenticationRule"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "case",
    "value" : "'添加策略规则-规则名称为空'"
  }, {
    "name" : "description",
    "value" : "'添加策略规则-规则名称为空'"
  }, {
    "name" : "httpParameters",
    "value" : "{'query': {'desc': '测试', 'priority': 0, 'ruleContent': '', 'ruleName': '', 'ruleTags': ['string01'], 'supportCondition': {}, 'templateName': 'string'}, 'response': {'code': 412, 'message': 'Precondition Failed', 'data': {'errorCode': 0, 'errorMessage': 'domain.session.authenticationPolicy.policy_already_has_the_same_rule'}}, 'caseNum': 'case_04', 'isCheckDB': False, 'checkDBType': 'exist', 'httpType': 'POST', 'paramType': 'json'}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 41,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 41
      },
      "items" : [ {
        "uid" : "6dbabc546bf0729b",
        "status" : "failed",
        "statusDetails" : "AssertionError: ['code'] 值错误！\nassert [412] == [200]\n  At index 0 diff: 412 != 200\n  Use -v to get the full diff",
        "time" : {
          "start" : 1601280484383,
          "stop" : 1601280484469,
          "duration" : 86
        }
      }, {
        "uid" : "17d1f1debb203ca",
        "status" : "failed",
        "statusDetails" : "AssertionError: ['code'] 值错误！\nassert [412] == [200]\n  At index 0 diff: 412 != 200\n  Use -v to get the full diff",
        "time" : {
          "start" : 1600249225096,
          "stop" : 1600249225178,
          "duration" : 82
        }
      }, {
        "uid" : "d4f83dd464ba97c0",
        "status" : "failed",
        "statusDetails" : "AssertionError: ['code'] 值错误！\nassert [412] == [200]\n  At index 0 diff: 412 != 200\n  Use -v to get the full diff",
        "time" : {
          "start" : 1600249145088,
          "stop" : 1600249145172,
          "duration" : 84
        }
      }, {
        "uid" : "2f66de93f2d0b2d0",
        "status" : "failed",
        "statusDetails" : "AssertionError: ['code'] 值错误！\nassert [412] == [200]\n  At index 0 diff: 412 != 200\n  Use -v to get the full diff",
        "time" : {
          "start" : 1600236156505,
          "stop" : 1600236156623,
          "duration" : 118
        }
      }, {
        "uid" : "8db64f95f1ea1b59",
        "status" : "failed",
        "statusDetails" : "AssertionError: ['code'] 值错误！\nassert [412] == [200]\n  At index 0 diff: 412 != 200\n  Use -v to get the full diff",
        "time" : {
          "start" : 1600156580158,
          "stop" : 1600156580256,
          "duration" : 98
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "9bf85033dc835c1.json",
  "parameterValues" : [ "'添加策略规则-规则名称为空'", "'添加策略规则-规则名称为空'", "{'query': {'desc': '测试', 'priority': 0, 'ruleContent': '', 'ruleName': '', 'ruleTags': ['string01'], 'supportCondition': {}, 'templateName': 'string'}, 'response': {'code': 412, 'message': 'Precondition Failed', 'data': {'errorCode': 0, 'errorMessage': 'domain.session.authenticationPolicy.policy_already_has_the_same_rule'}}, 'caseNum': 'case_04', 'isCheckDB': False, 'checkDBType': 'exist', 'httpType': 'POST', 'paramType': 'json'}" ]
}